import os, sys, csv, subprocess

folderPath = str(sys.argv[1])
bmName = str(sys.argv[2])
numFIGroups = int(sys.argv[3])
maxNumberFiPerGroup = int(sys.argv[4])
inputArg = str(sys.argv[5])

numInsts = 1880

def createNewSubprocess(execlist, isShell=False):
	return subprocess.Popen(execlist, shell=isShell, stdout=subprocess.PIPE)

def calculateSDC():


	totalCounter = 0
	sdcCounter = 0
	crashCounter = 0
	maskingCounter = 0
	crashDic = {}
	sdcDic = {}
	instDic = {}
	count = {}

	fiBitsDic = {}
	fitBitSDCDic = {}

	


	global folderPath,  maxNumberFiPerGroup
 
	for i in range(0,numFIGroups):
		ref_folder_path = os.path.join(folderPath, "fi-%i"%(i))
		if not os.path.isdir(ref_folder_path):
			# print("[NonExist] Inst %i,0,0,0.0"%i)
			continue
		llfiFolderPath = os.path.join(ref_folder_path, "llfi")
		if not os.path.isdir(llfiFolderPath):
			# print("[NoFI] Inst %i,0,0,0.0"%i)
			continue
        
		# print(' ==== llfiFolderPath: %s ======\n'%llfiFolderPath)

		mtotalCounter, msdcCounter ,mcrashCounter , mcrashDic, msdcDic, minstDic, mmaskingCounter, mFiBitsDic,mFitBitSDCDic = calculateCurrentCluster(llfiFolderPath)

		totalCounter += mtotalCounter
		sdcCounter += msdcCounter
		crashCounter += mcrashCounter
		maskingCounter += mmaskingCounter



		

		for instIndex in minstDic:
			instIndex = int(instIndex)
			if instIndex not in instDic:
				instDic[instIndex] = 0
				fiBitsDic[instIndex] = [0] * len(mFiBitsDic[instIndex])
				fitBitSDCDic[instIndex] = [0] * len(mFitBitSDCDic[instIndex])
			if instIndex not in sdcDic:
				sdcDic[instIndex] = 0
			if instIndex not in crashDic:
				crashDic[instIndex] = 0

			instDic[instIndex] += minstDic[instIndex]
			sdcDic[instIndex] += msdcDic[instIndex]
			crashDic[instIndex] += mcrashDic[instIndex]
			for j in range(0, len(mFiBitsDic[instIndex])):
				fiBitsDic[instIndex][j] += mFiBitsDic[instIndex][j]
				# fiBitsDic[instIndex][j] += 1
			
			for j in range(0, len(mFitBitSDCDic[instIndex])):
				fitBitSDCDic[instIndex][j] += mFitBitSDCDic[instIndex][j]
				

	os.system("mkdir -p overall-output")
	filepath = "overall-output/overall-failure-rates-summary-" + inputArg.replace(' ', '-') + ".log"
	with open(filepath, 'w') as f:
		f.write("Overall SDC rate: " + str(sdcCounter) + "/" + str(totalCounter) + " = " + str(sdcCounter/float(totalCounter)*100) + "%\n")
		f.write("Overall crash rate: " + str(crashCounter) + "/" + str(totalCounter) + " = " + str(crashCounter/float(totalCounter)*100) + "%\n")
		f.write("Overall masking rate: " + str(maskingCounter) + "/" + str(totalCounter) + " = " + str((1-sdcCounter/float(totalCounter)-crashCounter/float(totalCounter))*100) + "%\n")

	os.system("mkdir -p per-inst-output")
	csvfilepath = "per-inst-output/per-inst-sdc-rates-" + inputArg.replace(" ", "-") + ".csv"
	csvfile = open(csvfilepath, 'w' )
	csvwriter = csv.writer(csvfile)
	csvwriter.writerow(["Inst ID", "Total FI", "Total SDC", "SDC Rate", "Crash Rate", "Masking Rate", "FI Reg Width", "Bit FI Count", "SDC Count for Bit"])
	# for instIndex in instDic:
	for instIndex in range(1,numInsts+1):
		totalInstFi = instDic.get(instIndex, 0)
		sdcCount = sdcDic.get(instIndex, 0)
		crashCount = crashDic.get(instIndex, 0)
		maskCount = totalInstFi - sdcCount - crashCount
		if (totalInstFi >= 10) :
			csvwriter.writerow([instIndex, totalInstFi, sdcCount, (100.0 * sdcCount) / (1.0 * totalInstFi), (100.0 * crashCount) / (1.0 * totalInstFi), (100.0 * maskCount) / (1.0 * totalInstFi), len(fiBitsDic[instIndex]), fiBitsDic[instIndex], fitBitSDCDic[instIndex]])
		else :
			csvwriter.writerow([instIndex, 0, 0, 0.00, 0.00, 0.00, 0, [], []])


	csvfile.close()

	


	print('=== done ===')



def calculateCurrentCluster(llfiFolderPath):
	if not os.path.isdir(llfiFolderPath) :
		print('should exist a directory')
		exit(1)

	global clusterFolderPath, clusterNumber, maxNumberFiPerGroup
	goldenFilePath = llfiFolderPath + "/baseline/result.prof.txt"
	outputFileBase = llfiFolderPath + "/prog_output/result.0-"
	errorFileBase = llfiFolderPath + "/error_output/errorfile-run-0-"
	statFileBase = llfiFolderPath + "/llfi_stat_output/llfi.stat.fi.injectedfaults.0-"

	goldenString = open(goldenFilePath, 'r').read()
	# print('====== start =====')
	mtotalCounter = 0
	msdcCounter = 0
	mcrashCounter = 0
	mcrashDic = {}
	msdcDic = {}
	minstDic = {}
	maskingCounter = 0
	mFiBitsDic = {}
	mFitBitSDCDic = {}

	for i in range(0, maxNumberFiPerGroup):
		statFilePath = statFileBase + str(i) + ".txt"
		errorFilePath = errorFileBase + str(i)
		outputFilePath = outputFileBase + str(i) + ".txt"

		try:
			if os.path.isfile(statFilePath):
				statString = open(statFilePath, 'r').read()
				instIndex = int(statString.split(", ")[2].split("fi_index=")[1])
				fiBit = int(statString.split(", ")[7].split("fi_bit=")[1])
				fiRegWidth = int(statString.split(", ")[6].split("fi_reg_width=")[1])
				
				if instIndex not in mcrashDic:
					mcrashDic[instIndex] = 0
				if instIndex not in msdcDic:
					msdcDic[instIndex] = 0
				if instIndex not in minstDic:
					minstDic[instIndex] = 0
					mFiBitsDic[instIndex] = [0] * fiRegWidth
					mFitBitSDCDic[instIndex] = [0] * fiRegWidth


				if os.path.isfile(errorFilePath):

					mcrashCounter += 1
					mcrashDic[instIndex] += 1
					mtotalCounter += 1
					minstDic[instIndex] += 1
					mFiBitsDic[instIndex][fiBit] += 1
					continue
				else:
					if os.path.isfile(outputFilePath):
						outputString = open(outputFilePath, 'r').read()
						if outputString != goldenString:
							#print("yes")
							msdcCounter += 1
							msdcDic[instIndex] += 1
							mFitBitSDCDic[instIndex][fiBit] += 1
						else:
							maskingCounter += 1
						mtotalCounter += 1
						minstDic[instIndex] += 1
						mFiBitsDic[instIndex][fiBit] += 1
						continue
					else:
						#print('output: %s\n'%outputFilePath)
						continue
		except:
			continue

	# print('====== end =====')


	return mtotalCounter, msdcCounter ,mcrashCounter , mcrashDic, msdcDic, minstDic,maskingCounter, mFiBitsDic,mFitBitSDCDic 



	

def main(args):
	calculateSDC()


if __name__ == "__main__":
    main(sys.argv[1:])
