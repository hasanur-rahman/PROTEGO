import math
import random
import os, sys, csv
from datetime import datetime


memY = {}
memSDC = {}
noOfThreads = 20
noFiperThread = 75

class Chromosome:
    def __init__(self, bounds, seen_input_sdc):
        global memY
        self.noOfArgs = len(bounds)
        self.seen_input_sdc = seen_input_sdc

        self.x = []
        self.inputString = ""
        for i in range(0, self.noOfArgs):
                #self.x.append(random.randint(bounds[i][0], bounds[i][1]))
                if i == 0:
                        self.x.append(random.randint(bounds[i][0], bounds[i][1]) * 16)
                        self.inputString = self.inputString + str(self.x[i])
                else:
                        self.x.append(random.randint(bounds[i][0], bounds[i][1]))
                        self.inputString = self.inputString + " " + str(self.x[i])

        self.inputString += " 1"

        self.y = 0
        self.cc = 0
        self.sdc = -1.0

    def func(self):
        global memY, memSDC

        # Update values
        self.inputString = ""
        for i in range(0, self.noOfArgs):
                if i == 0:
                        self.inputString = self.inputString + str(self.x[i])
                else:
                        self.inputString = self.inputString + " " + str(self.x[i])
        self.inputString += " 1"

        if self.inputString in memY:
                self.y = memY[self.inputString]
                self.sdc = memSDC[self.inputString]

        else:
                os.system("echo {} > input_list.txt".format(self.inputString))
                os.system("python runFiForInputs.py needle {}".format(noOfThreads))
                os.system("python getFailureforInputs.py . needle {} {}".format(noOfThreads, noFiperThread))
                os.system("rm -r needle-*")

                
                inst_sdc_input2 = {}

                try:
                        of = open("overall-output/overall-failure-rates-summary-" + self.inputString.replace(" ", "-") + ".log", 'r')
                        fi_summary = of.readlines()
                        totalFi = int(fi_summary[0].split(":")[1].split("=")[0].split("/")[1])
                        totalSDC = int(fi_summary[0].split(":")[1].split("=")[0].split("/")[0])
                        sdcRate = round(float(fi_summary[0].split(":")[1].split("=")[1].split("%")[0]),4)
                except:
                        self.y = 0.0
                        self.cc = 0
                        self.sdc = -1.0
                        memY[self.inputString] = self.y
                        memSDC[self.inputString] = self.sdc
                        logF = open("ga-output.log", 'a')
                        logF.write("Evaluating input: {}; Fitness Score: {:.6f}; SDC Rate: {:.2f}\n".format(self.inputString, self.y, self.sdc))
                        logF.write("No FI result for input: {}\n".format(self.inputString))
                
                        now = datetime.now()
                        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

                        logF.write("**** [TIME] **** : " + str(dt_string) + "\n" )
                        logF.close()
                        return

                with open("per-inst-output/per-inst-sdc-rates-{}.csv".format(self.inputString.replace(" ", "-"))) as fff:
                    reader = csv.reader(fff)
                    next(reader)
                    for row in reader:
                        inst_id = int(row[0])
                        fi_count = int(row[1])
                        sdc_rate = float(row[3])

                        inst_sdc_input2[inst_id] = (sdc_rate, fi_count) 
        
                fitness_score = 0.0
                num_fitness_inputs = 0
                for cur_inp in self.seen_input_sdc.keys():
                        cur_inp_sdc_abs_diff = 0.0
                        num_insts = 0
                        with open("per-inst-output/per-inst-sdc-rates-{}.csv".format(cur_inp.replace(" ", "-"))) as fff:
                                reader = csv.reader(fff)
                                next(reader)
                                for row in reader:
                                        inst_id = int(row[0])
                                        fi_count = int(row[1])
                                        sdc_rate = float(row[3])

                                        (reference_sdc_rate, reference_fi_count) = inst_sdc_input2[inst_id]
                                        if reference_fi_count == 0 or fi_count == 0:
                                                continue

                                        if reference_sdc_rate == 0.0:
                                                reference_sdc_rate = 0.5
                                        cur_inp_sdc_abs_diff += 100.0 * abs(sdc_rate - reference_sdc_rate) / reference_sdc_rate
                                        # cur_inp_sdc_abs_diff += abs(sdc_rate - reference_sdc_rate)
                                        num_insts += 1

                        if num_insts > 0:
                                cur_inp_sdc_abs_diff /= (1.0 * num_insts)


                        fitness_score += cur_inp_sdc_abs_diff
                        num_fitness_inputs += 1

                if num_fitness_inputs > 0:
                        fitness_score /= (1.0 * num_fitness_inputs)

                if fitness_score == 0.0:
                        fitness_score = 0.5
                        

                self.y = fitness_score
                self.cc = 0
                self.sdc = sdcRate
                memY[self.inputString] = self.y
                memSDC[self.inputString] = self.sdc

        logF = open("ga-output.log", 'a')
        logF.write("Evaluating input: {}; Fitness Score: {:.6f}; SDC Rate: {:.2f}\n".format(self.inputString, self.y, self.sdc))
     
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

        logF.write("**** [TIME] **** : " + str(dt_string) + "\n" )
        logF.close()
        

